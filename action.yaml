name: "Discloud API Action"
description: "GitHub Action to interact with the Discloud API"
author: "Marco Qui√ßula <marco.quicula@quicula.com.br>"
branding:
  icon: "upload-cloud"
  color: "green"

inputs:
  discloud_api_token:
    description: "API token for authentication"
    required: true
  command:
    description: "Command to be executed. Supported commands: userinfo, delete, status, upload, commit"
    required: true
  appId:
    description: "Application ID. Required for the following commands: delete, status, commit. Can contain the value 'all' for the following commands: delete, status"
    required: false
  file:
    description: "File (.zip) to be uploaded. Required for the following commands: upload, commit"
    required: false
  actionIfExists:
    description: "Action to be taken if the application is already active. Required for the following command: upload"
    required: false
outputs:
  http_code:
    description: "HTTP status code returned by the API or internal handler"
    value: ${{ steps.send_output.outputs.http_code }}

  response_body:
    description: "Body of the API response or internal handler"
    value: ${{ steps.send_output.outputs.response_body }}

  error_message:
    description: "Error message from API or internal handler"
    value: ${{ steps.send_output.outputs.error_message }}

  response_source:
    description: "Indicates whether the response came from the API or was handled internally. Possible values: api, internal"
    value: ${{ steps.send_output.outputs.response_source }}

runs:
  using: "composite"
  steps:
    - name: Validate Input Properties
      run: ./scripts/validate_input.sh "${{ inputs.command }}" "${{ inputs.appId }}" "${{ inputs.file }}" "${{ inputs.actionIfExists }}"
      shell: bash

    - name: Set up environment variables
      run: |
        echo "DISCLOUD_API_TOKEN=${{ inputs.DISCLOUD_API_TOKEN }}" >> $GITHUB_ENV
      shell: bash

    - name: Run userinfo Command
      id: userinfo
      if: ${{ inputs.command == 'userinfo' }}
      run: ./scripts/userinfo.sh
      shell: bash

    - name: Check userinfo Outputs
      if: ${{ inputs.command == 'userinfo' }}
      run: |
        echo 'http_code_var=${{ steps.userinfo.outputs.http_code }}' >> $GITHUB_ENV
        echo 'response_body_var=${{ steps.userinfo.outputs.response_body }}' >> $GITHUB_ENV
        echo 'error_message_var=${{ steps.userinfo.outputs.error_message }}' >> $GITHUB_ENV
        echo 'response_source_var=${{ steps.userinfo.outputs.response_source }}' >> $GITHUB_ENV
      shell: bash

    - name: Run app-status Command
      id: app-status
      if: ${{ inputs.command == 'app-status' }}
      run: ./scripts/app-status.sh "${{ inputs.appId }}"
      shell: bash

    - name: Check app-status Outputs
      if: ${{ inputs.command == 'app-status' }}
      run: |
        echo 'http_code_var=${{ steps.app-status.outputs.http_code }}' >> $GITHUB_ENV
        echo 'response_body_var=${{ steps.app-status.outputs.response_body }}' >> $GITHUB_ENV
        echo 'error_message_var=${{ steps.app-status.outputs.error_message }}' >> $GITHUB_ENV
        echo 'response_source_var=${{ steps.app-status.outputs.response_source }}' >> $GITHUB_ENV
      shell: bash

    - name: Run app-delete Command
      id: app-delete
      if: ${{ inputs.command == 'app-delete' }}
      run: ./scripts/app-delete.sh "${{ inputs.appId }}"
      shell: bash

    - name: Check app-delete Outputs
      if: ${{ inputs.command == 'app-delete' }}
      run: |
        echo 'http_code_var=${{ steps.app-delete.outputs.http_code }}' >> $GITHUB_ENV
        echo 'response_body_var=${{ steps.app-delete.outputs.response_body }}' >> $GITHUB_ENV
        echo 'error_message_var=${{ steps.app-delete.outputs.error_message }}' >> $GITHUB_ENV
        echo 'response_source_var=${{ steps.app-delete.outputs.response_source }}' >> $GITHUB_ENV
      shell: bash

    - name: Run app-upload-zip Command
      id: upload-zip
      if: ${{ inputs.command == 'upload-zip' }}
      run: ./scripts/upload-zip.sh "${{ inputs.file }}" "${{ inputs.actionIfExists }}"
      shell: bash

    - name: Check upload-zip Outputs
      if: ${{ inputs.command == 'upload-zip' }}
      run: |
        echo 'http_code_var=${{ steps.upload-zip.outputs.http_code }}' >> $GITHUB_ENV
        echo 'response_body_var=${{ steps.upload-zip.outputs.response_body }}' >> $GITHUB_ENV
        echo 'error_message_var=${{ steps.upload-zip.outputs.error_message }}' >> $GITHUB_ENV
        echo 'response_source_var=${{ steps.upload-zip.outputs.response_source }}' >> $GITHUB_ENV
      shell: bash

    - name: Send Output Values
      id: send_output
      run: |
        echo 'http_code=$http_code_var' >> '$GITHUB_OUTPUT'
        echo 'response_body=$response_body_var' >> '$GITHUB_OUTPUT'
        echo 'error_message=$error_message_var' >> '$GITHUB_OUTPUT'
        echo 'response_source=$response_source_var' >> '$GITHUB_OUTPUT'
      shell: bash
